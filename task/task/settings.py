"""
Django settings for task project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9km&=m+2kqr!r901@1da(-)+3q)m@8xb1a&uwhpq1%d$&iqhau'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'modeltranslation', # обязательно впишите его перед админом  переводчик моделей
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    ######
    'news.apps.NewsConfig',
    ######
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # ... include the providers you want to enable:
    'allauth.socialaccount.providers.google',
    # apscheduler для периодических задач после установки обязательно выполнить миграци.
    'django_apscheduler',
    # мои проекты
    'sign',
    'protect',
    #'news',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware', # Для возможности выбора языка перевода и именно в этой позиции
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'news.middlewares.TimezoneMiddleware', # добавляем свое middleware для работы с часовыми поясами !
]

ROOT_URLCONF = 'task.urls'

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'task.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
SITE_ID = 1

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

#LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'ru'
TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# LANGUAGES = [
#     ('en-us', 'English'),
#     ('ru', 'Русский')
# ]
LANGUAGES = [
    ('ru', 'Русский'),
    ('en-us', 'English')
]


EMAIL_HOST = 'smtp.yandex.ru'  # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 465  # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = 'Umba.dog'  # ваше имя пользователя, например, если ваша почта user@yandex.ru, то сюда надо писать user, иными словами, это всё то что идёт до собаки
EMAIL_HOST_PASSWORD = 'ventagoy1973'  # пароль от почты
EMAIL_USE_SSL = True  # Яндекс использует ssl, подробнее о том, что это, почитайте в дополнительных источниках, но включать его здесь обязательно
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # используется для тестовой отправки писем

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

ADMINS = [
    ('Admin1', 'vpipchenko@yandex.ru'),
    # список всех админов в формате ('имя', 'их почта')
]
SERVER_EMAIL = 'Umba.dog@yandex.ru'

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_FORMS = {'signup': 'sign.models.CommonSignupForm'}

# формат даты, которую будет воспринимать наш задачник (вспоминаем модуль по фильтрам)
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
# если задача не выполняется за 25 секунд, то она автоматически снимается, можете поставить время побольше, но как правило, это сильно бьёт по производительности сервера
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds


STATICFILES_DIRS = [ BASE_DIR / "static" ]

#настройка redis для CELERY
CELERY_BROKER_URL = 'redis://:a1M0Vq8pflPo2j56o9gYUE7Ft9ive73v@redis-18486.c257.us-east-1-3.ec2.cloud.redislabs.com:18486'
CELERY_RESULT_BACKEND = 'redis://:a1M0Vq8pflPo2j56o9gYUE7Ft9ive73v@redis-18486.c257.us-east-1-3.ec2.cloud.redislabs.com:18486'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
#BROKER_POOL_LIMIT=0 # скидывание залипших сессий

# Кэширование
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'), # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
    }
}



# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'filters': {
#         'require_debug_false': {
#            '()': 'django.utils.log.RequireDebugFalse',
#         },
#         'require_debug_true': {
#            '()': 'django.utils.log.RequireDebugTrue',
#         },
#     },
#     'formatters':{  # задаем формат вывода данных
#         'f_debug': {
#            'format': '{levelname} {asctime}',
#            'datetime': '%Y.%m.%d  %H:%M:%S',
#            'style': '{'
#            },
#         'f_info': {
#            'format': '{levelname} {message} {asctime} {module}',
#            'datetime': '%Y.%m.%d  %H:%M:%S',
#            'style': '{'
#            },
#         'f_warning': {
#            'format': '{levelname} {message} {asctime} {pathname}',
#            'datetime': '%Y.%m.%d  %H:%M:%S',
#            'style': '{'
#            },
#         'f_error': {
#            'format': '{levelname} {message} {asctime} {exc_info}',
#            'datetime': '%Y.%m.%d  %H:%M:%S',
#            'style': '{'
#            },
#         'f_error_2': {
#            'format': '{asctime} {levelname} {message} {pathname} {exc_info}',
#            'datetime': '%Y.%m.%d  %H:%M:%S',
#            'style': '{'
#            },
#         'f_security': {
#            'format': '{asctime} {levelname} {module} {message}',
#            'datetime': '%Y.%m.%d  %H:%M:%S',
#            'style': '{'
#            },
#         'f_mail': {
#            'format': '{asctime} {levelname} {message} {pathname}',
#            'datetime': '%Y.%m.%d  %H:%M:%S',
#            'style': '{'
#            },
#         },
#     'handlers': {    # задаем формат  обработки данных
#         'console_d': {
#              'level': 'DEBUG',
#              'class': 'logging.StreamHandler',
#              'formatter': 'f_debug',
#              'filters': ['require_debug_true'],
#              },
#         'console_w': {
#              'level': 'WARNING',
#              'class': 'logging.StreamHandler',
#              'formatter': 'f_warning',
#              'filters': ['require_debug_true'],
#              },
#         'console_e': {
#              'level': 'ERROR',
#              'class': 'logging.StreamHandler',
#              'formatter': 'f_error',
#              'filters': ['require_debug_true'],
#              },
#         'file_i': {
#              'level': 'INFO',
#              'class': 'logging.FileHandler',
#              'filename': 'general.log',
#              'formatter': 'f_info',
#              'filters': ['require_debug_false'],
#              },
#         'file_e': {
#              'level': 'ERROR',
#              'class': 'logging.FileHandler',
#              'filename': 'errors.log',
#              'formatter': 'f_error_2',
#              },
#         'file_s': {
#              'level': 'DEBUG',
#              'class': 'logging.FileHandler',
#              'filename': 'security.log',
#              'formatter': 'f_security',
#              },
#         'mail_admin': {
#              'level': 'INFO',
#              'class': 'django.utils.log.AdminEmailHandler',
#              'formatter': 'f_mail',
#              'filters': ['require_debug_false'],
#              },
#         },
#
#     'loggers': {  # задаем формат  регистрации данных
#         'django':{
#               'handlers':['console_d','console_w', 'console_e','file_i'],
#                'level': 'DEBUG',
#         },
#         'django.request': {
#               'handlers':['file_e', 'mail_admin'],
#               'level': 'ERROR',
#               'propagate': False, # если установить в true то передатст обработку в обработчик джанго
#         },
#         'django.server': {
#               'handlers':['file_e', 'mail_admin'],
#               'level': 'ERROR',
#               'propagate': False, # если установить в true то передатст обработку в обработчик джанго
#         },
#         'django.template': {
#               'handlers':['file_e'],
#               'level': 'ERROR',
#               'propagate': False, # если установить в true то передатст обработку в обработчик джанго
#         },
#         'django.template': {
#               'handlers':['file_e'],
#               'level': 'ERROR',
#               'propagate': False, # если установить в true то передатст обработку в обработчик джанго
#         },
#         'django.db_backends': {
#               'handlers':['file_e'],
#               'level': 'ERROR',
#               'propagate': False, # если установить в true то передатст обработку в обработчик джанго
#         },
#         'django.security': {
#               'handlers':['file_s'],
#               'level': 'DEBUG',
#               'propagate': False, # если установить в true то передатст обработку в обработчик джанго
#         },
#
#     },
# #
#
# }

